// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("NEON_DATABASE_URL")
}

model User {
  id              Int           @id @default(autoincrement())
  name            String        @unique
  email           String        @unique
  password        String
  isAuthenticated Boolean       @default(false)
  createdAt       DateTime      @default(now())
  Session         Session?
  Watchlist       Watchlist[]
  LikedMovies     LikedMovies[]
  Bookmarks       Bookmarks[]
  Review          Review[]
}

model Session {
  id           Int      @id @default(autoincrement())
  userId       Int      @unique
  refreshToken String   @unique
  expiresAt    BigInt
  createdAt    DateTime @default(now())
  user         User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model Watchlist {
  id            Int      @id @default(autoincrement())
  userId        Int
  movieId       Int
  movieName     String
  moviePoster   String
  movieOverview String
  voteAvg       Float
  voteCount     Int
  addedAt       DateTime @default(now())

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([userId, movieId])
}

model LikedMovies {
  id            Int      @id @default(autoincrement())
  userId        Int
  movieId       Int
  movieName     String
  moviePoster   String
  movieOverview String
  voteAvg       Float
  voteCount     Int
  likedAt       DateTime @default(now())

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([userId, movieId])
}

model Bookmarks {
  id            Int      @id @default(autoincrement())
  userId        Int
  movieId       Int
  movieName     String
  moviePoster   String
  movieOverview String
  voteAvg       Float
  voteCount     Int
  likedAt       DateTime @default(now())

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([userId, movieId])
}

model Review {
  id         Int      @id @default(autoincrement())
  userId     Int
  username String
  movieId    Int
  reviewText String
  rating     Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime

  user User @relation(references: [id], fields: [userId], onDelete: Cascade)

  @@unique([userId, movieId])
}
